/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.final_project_pbo.ui;

import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;

import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;

/**
 *
 * @author zakyp
 */
public class FrameScanBarang extends javax.swing.JFrame implements Runnable, ThreadFactory {
    private WebcamPanel panel = null;
    private Webcam webcam = null;
    private ExecutorService executor = Executors.newSingleThreadExecutor(this);
    private volatile boolean running = true;

    /**
     * Creates new form FrameScanBarang
     */
    public FrameScanBarang() {
        initComponents();
        initWebcam();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        webCamPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Kategori = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1080, 720));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout webCamPanelLayout = new javax.swing.GroupLayout(webCamPanel);
        webCamPanel.setLayout(webCamPanelLayout);
        webCamPanelLayout.setHorizontalGroup(
                webCamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 640, Short.MAX_VALUE));
        webCamPanelLayout.setVerticalGroup(
                webCamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 376, Short.MAX_VALUE));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {
                        { null, null, null, null },
                        { null, null, null, null },
                        { null, null, null, null },
                        { null, null, null, null }
                },
                new String[] {
                        "Title 1", "Title 2", "Title 3", "Title 4"
                }));
        jScrollPane1.setViewportView(jTable1);

        Kategori.setBackground(new java.awt.Color(255, 255, 255));
        Kategori.setFont(new java.awt.Font("Tw Cen MT", 1, 24)); // NOI18N
        Kategori.setForeground(new java.awt.Color(93, 173, 226));
        Kategori.setText("Scan Barang");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(39, 39, 39)
                                                .addComponent(Kategori))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(210, 210, 210)
                                                .addComponent(webCamPanel, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(298, 298, 298)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 475,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(453, Short.MAX_VALUE)));
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(Kategori)
                                .addGap(31, 31, 31)
                                .addComponent(webCamPanel, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(148, Short.MAX_VALUE)));

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameScanBarang.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameScanBarang.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameScanBarang.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameScanBarang.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameScanBarang().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Kategori;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel webCamPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        while (running) {
            try {
                Thread.sleep(500);
            } catch (InterruptedException ex) {
                Thread.currentThread().interrupt();
                break;
            }

            try {
                if (webcam == null || !webcam.isOpen())
                    continue;

                BufferedImage image = webcam.getImage();
                if (image == null)
                    continue;

                LuminanceSource source = new BufferedImageLuminanceSource(image);
                BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));

                Result result;
                try {
                    result = new MultiFormatReader().decode(bitmap);
                } catch (NotFoundException nf) {
                    continue; // Tidak ada barcode ditemukan, lanjut scanning
                }

                if (result != null) {
                    String barcode = result.getText();
                    System.out.println("Barcode detected: " + barcode);

                    // --- Tampilkan ke JTable (atau proses ke database produk) ---
                    SwingUtilities.invokeLater(() -> {
                        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                        int rowNum = model.getRowCount() + 1;
                        model.addRow(new Object[] { rowNum, barcode });
                    });

                    // Bisa tambahkan logic: otomatis cari produk di database berdasarkan barcode
                    // Misal: Product produk = productRepository.findByBarcode(barcode);

                    // Jika ingin stop setelah berhasil scan satu produk:
                    // running = false;
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    @Override
    public Thread newThread(Runnable r) {
        Thread t = new Thread(r, "BarcodeScannerThread");
        t.setDaemon(true); // Safe to exit on app close
        return t;
    }

    private void initWebcam() {
        // List all available webcams
        java.util.List<Webcam> webcams = Webcam.getWebcams();

        if (webcams.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No webcams found!", "Error", JOptionPane.ERROR_MESSAGE);
            executor.shutdown();
            return;
        }

        // Print webcam list for debugging
        for (int i = 0; i < webcams.size(); i++) {
            System.out.println("[" + i + "] " + webcams.get(i).getName());
        }

        Webcam chosenWebcam = null;
        int cameraIndex = 2; // your target, change as needed

        // Try to open the requested camera, or fallback to the first working one
        if (cameraIndex < webcams.size()) {
            chosenWebcam = webcams.get(cameraIndex);
            try {
                Dimension[] resolutions = chosenWebcam.getViewSizes();
                Dimension maxResolution = resolutions[resolutions.length - 1];
                chosenWebcam.setViewSize(maxResolution);
                chosenWebcam.open(true); // try async
            } catch (Exception ex) {
                System.out.println("Failed to open camera at index " + cameraIndex + ": " + ex.getMessage());
                chosenWebcam = null;
            }
        }
        if (chosenWebcam == null || !chosenWebcam.isOpen()) {
            // fallback: try any working camera
            for (int i = 0; i < webcams.size(); i++) {
                Webcam test = webcams.get(i);
                try {
                    Dimension[] resolutions = test.getViewSizes();
                    Dimension maxResolution = resolutions[resolutions.length - 1];
                    test.setViewSize(maxResolution);
                    test.open(true);
                    if (test.isOpen()) {
                        chosenWebcam = test;
                        System.out.println("Fallback to camera " + i + " " + test.getName());
                        break;
                    }
                } catch (Exception ex) {
                    System.out.println("Camera " + i + " failed: " + ex.getMessage());
                }
            }
        }

        if (chosenWebcam == null || !chosenWebcam.isOpen()) {
            JOptionPane.showMessageDialog(this, "Failed to open any webcam!", "Error", JOptionPane.ERROR_MESSAGE);
            executor.shutdown();
            return;
        }

        this.webcam = chosenWebcam;

        panel = new WebcamPanel(this.webcam);
        panel.setPreferredSize(this.webcam.getViewSize());
        panel.setFPSDisplayed(true);

        webCamPanel.setLayout(new java.awt.BorderLayout());
        webCamPanel.add(panel, java.awt.BorderLayout.CENTER);

        executor.execute(this);
        // Don't call executor.shutdown() here; let the scanner thread run
    }

    // Dummy implementation for CircularImageFrame to resolve the error
    private void CircularImageFrame(String imagePath) {
        // Example: Show a dialog or update the GUI with the image
        System.out.println("CircularImageFrame called with: " + imagePath);
    }

    @Override
    public void dispose() {
        running = false; // Signal the scanner thread to stop
        // Shutdown the executor *before* closing the webcam, to avoid race conditions
        executor.shutdownNow(); // Attempt to interrupt the thread

        if (webcam != null) {
            if (webcam.isOpen()) {
                webcam.close();
            }
            webcam = null; // Optional: help GC
        }
        super.dispose();

        // Open the ManajemenBarang frame after disposing this one (optional, as per
        // your flow)
        javax.swing.SwingUtilities.invokeLater(() -> {
            ManajemenBarang frame = new ManajemenBarang();
            frame.setVisible(true);
        });
    }

}